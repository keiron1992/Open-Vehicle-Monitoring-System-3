name: Build OVMS Maxus T90 (SoC)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (host)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Stub out missing components
        run: |
          echo "ðŸ”¸ Stubbing missing components..."

          mkdir -p vehicle/OVMS.V3/components/simcom
          echo '// Dummy to satisfy build' > vehicle/OVMS.V3/components/simcom/simcom_powering.cpp
          cat <<EOF > vehicle/OVMS.V3/components/simcom/CMakeLists.txt
          idf_component_register(SRCS "simcom_powering.cpp" INCLUDE_DIRS ".")
          EOF

          mkdir -p vehicle/OVMS.V3/components/vehicle_maple60s/src
          echo '// Dummy to satisfy build' > vehicle/OVMS.V3/components/vehicle_maple60s/src/vehicle_maple60s.cpp
          cat <<EOF > vehicle/OVMS.V3/components/vehicle_maple60s/CMakeLists.txt
          idf_component_register(SRCS "src/vehicle_maple60s.cpp" INCLUDE_DIRS "src")
          EOF

          mkdir -p vehicle/OVMS.V3/components/vehicle_maxus_euniq6
          echo '// Dummy to satisfy build' > vehicle/OVMS.V3/components/vehicle_maxus_euniq6/vehicle_me6.cpp
          cat <<EOF > vehicle/OVMS.V3/components/vehicle_maxus_euniq6/CMakeLists.txt
          idf_component_register(SRCS "vehicle_me6.cpp" INCLUDE_DIRS ".")
          EOF

      - name: Prepare sdkconfig and sdkconfig.defaults
        run: |
          echo "ðŸ”¹ Creating CI sdkconfig..."
          # sdkconfig.defaults is applied *before* CMake configure, ensuring WolfSSL picks up the flag
          cat <<EOF > vehicle/OVMS.V3/sdkconfig.defaults
          CONFIG_FREERTOS_ENABLE_BACKWARD_COMPATIBILITY=y
          CONFIG_OVMS_VEHICLE_MAXUS_T90=y
          EOF

          # sdkconfig can remain minimal, as sdkconfig.defaults seeds it anyway
          cat <<EOF > vehicle/OVMS.V3/sdkconfig
          CONFIG_FREERTOS_ENABLE_BACKWARD_COMPATIBILITY=y
          CONFIG_OVMS_VEHICLE_MAXUS_T90=y
          EOF

      - name: Build in Espressif container (IDF 5.1)
        uses: addnab/docker-run-action@v3
        with:
          image: espressif/idf:release-v5.1
          options: -v ${{ github.workspace }}:/workspace
          shell: bash
          run: |
            set -e
            cd /workspace/vehicle/OVMS.V3

            echo "ðŸ”¹ Sourcing ESP-IDF environment..."
            source ${IDF_PATH}/export.sh

            echo "ðŸ”¹ Using sdkconfig.defaults and sdkconfig..."
            cat sdkconfig.defaults
            cat sdkconfig

            echo "ðŸ”¹ Setting target..."
            idf.py set-target esp32

            echo "ðŸ”¹ Applying defaults..."
            idf.py defconfig

            echo "ðŸ”¹ Building..."
            idf.py build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ovms3-maxus-t90-${{ github.run_number }}
          path: |
            vehicle/OVMS.V3/build/ovms3.bin
            vehicle/OVMS.V3/build/partitions.bin
            vehicle/OVMS.V3/build/bootloader/bootloader.bin
            vehicle/OVMS.V3/build/ota_data_initial.bin
